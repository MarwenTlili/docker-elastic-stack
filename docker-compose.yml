version: '3.7'

services:
  elasticsearch:
    container_name: elasticsearch
    hostname: ${ES_HOST}
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:z
      - ./elasticsearch/data:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300" # for transport_address
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g # DON'T USE IT IN PRODUCTION
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
      KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
    networks:
      - elk

  logstash:
    container_name: logstash
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/config/kafka/kafka_jaas.conf:/usr/share/logstash/config/kafka/kafka_jaas.conf:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      - ./logstash/patterns:/usr/share/logstash/patterns:rw,z
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xmx512m -Xms512m
      LOGSTASH_KEYSTORE_PASS: ${LOGSTASH_KEYSTORE_PASS}
      ES_LOGSTASH_INTERNAL_PWD: ${ES_LOGSTASH_INTERNAL_PWD}
      KAFKA_HOST: kafka.gproconsulting.com
    networks:
      - elk
    depends_on:
      - elasticsearch
      - kafka

  kibana:
    container_name: kibana
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-} # better use kibana-keystore
    networks:
      - elk
    depends_on:
      - elasticsearch

  zookeeper:
    image: 'bitnami/zookeeper:${ZOOKEEPER_VERSION}'
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ZOO_SERVER_ID=1
      - ALLOW_ANONYMOUS_LOGIN=no  # disable anonymous login
      - ZOO_ENABLE_AUTH=${ZOO_ENABLE_AUTH}
      - ZOO_SERVER_USERS=${ZOO_SERVER_USERS}
      - ZOO_SERVER_PASSWORDS=${ZOO_SERVER_PASSWORDS}
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - elk
  
  kafka:
    image: 'bitnami/kafka:${KAFKA_VERSION}'
    container_name: kafka
    hostname: kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      - BITNAMI_DEBUG=true # false when in PRODUCTION
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=no
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      # key/value pairs for the security protocol to use per listener name
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
      # list of listeners and the host/IP and port to which Kafka binds to for listening
      - KAFKA_CFG_LISTENERS=INTERNAL://:9093,EXTERNAL://:9092
      # list of listeners with their host/IP and port
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://:9093,EXTERNAL://localhost:9092
      # define which listener to use, for Kafka brokers communicate between themselves
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_INTER_BROKER_USER=${KAFKA_INTER_BROKER_USER}            # inter broker communication user
      - KAFKA_INTER_BROKER_PASSWORD=${KAFKA_INTER_BROKER_PASSWORD}
      - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=SCRAM-SHA-256  # or PLAIN,SCRAM-SHA-256,SCRAM-SHA-512,OAUTHBEARER
      - KAFKA_ZOOKEEPER_PROTOCOL=${KAFKA_ZOOKEEPER_PROTOCOL}          # auth protocol SASL
      - KAFKA_ZOOKEEPER_USER=${KAFKA_ZOOKEEPER_USER}
      - KAFKA_ZOOKEEPER_PASSWORD=${KAFKA_ZOOKEEPER_PASSWORD}
      # - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN # default: PLAIN,SCRAM-SHA-256,SCRAM-SHA-512
      - KAFKA_CLIENT_USERS=${KAFKA_CLIENT_USERS}
      - KAFKA_CLIENT_PASSWORDS=${KAFKA_CLIENT_PASSWORDS}
    volumes:
      - kafka-data:/bitnami/kafka
      - kafka-config:/opt/bitnami/kafka/config
    #   # Both .jks and .pem files are supported
    #   - './certs/keystore/kafka.keystore.jks:/opt/bitnami/kafka/config/certs/kafka.keystore.jks:ro'
    #   - './certs/truststore/kafka.truststore.jks:/opt/bitnami/kafka/config/certs/kafka.truststore.jks:ro'
    depends_on:
      - zookeeper
    networks:
      - elk

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
  zookeeper-data:
  kafka-data:
  kafka-config: