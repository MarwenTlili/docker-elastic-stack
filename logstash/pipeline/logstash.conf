input {
	# beats {
	# 	port => 5044
	# }

	kafka {
		codec => json
		bootstrap_servers => "kafka:9093"
		topics => ["filebeat-events"]
		group_id => "Dexter"
		auto_offset_reset => "earliest"
		sasl_jaas_config => "org.apache.kafka.common.security.scram.ScramLoginModule required username='logstash'  password='YAO4IwkrI1ncQMn';"
		sasl_mechanism => "SCRAM-SHA-256"
		security_protocol => "SASL_PLAINTEXT"		# "PLAINTEXT", "SSL", "SASL_PLAINTEXT", "SASL_SSL"
	}
}

filter {
	if [event][dataset] == "apache.access"{
		grok {
			# ecs_compatibility => v1
			patterns_dir => ["./patterns"]
			match => { 
				# apache common
				# "message" => '%{COMMONAPACHELOG}'
				"message" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:logtimestamp}\] "(?:%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-)' 
			}
		}
		grok{
			match => {
				"request" => ['%{MODULE_NAME_FROM_URL:module_name}','']
			}
		}
		date {
			match => ["logtimestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
			timezone => "Etc/GMT-1"
			locale => "en"
		}

		mutate { convert => {"bytes" => "integer"}}
		mutate { convert => {"response" => "integer"}}

		mutate { add_field => { "[@metadata][index_name]" => "access-log-%{+YYYY}" } }

		mutate {
			remove_field => [ "agent", "service", "ecs", "tags", "fileset" ]
		}
		# mutate{
		# 	remove_field => ["message"]
		# }
	}
	if [fields][type] == "catalina" or [fields][type] == "localhost"{
		grok{
			patterns_dir => ["./patterns"]
			match => {
				# "message" => '%{DATETIMECATALINACUSTOMFR:logtimestamp}%{SPACE}%{JAVACLASS:javaclass}%{SPACE}%{WORD:method}%{NEWLINE}%{GREEDYDATA:grave}(%{NEWLINE}%{CATALINAEXCEPTION:exception})?'
				"message" => '%{DATETIMECATALINACUSTOMFR:logtimestamp}%{SPACE}%{JAVACLASS:javaclass}%{SPACE}%{WORD:method}%{NEWLINE}(?:%{CATALINAEXCEPTION:exception}|%{GREEDYDATA:exception})?'
			}
		}
		grok{
			patterns_dir => ["./patterns"]
			# keep_empty_captures => true
			# break_on_match => false
			match => {
				# "exception" => '%{MODULE_NAME:module_name}'
				"exception" => ['%{MODULE_NAME:module_name}','']
			}
		}
		if [fields][type] == "catalina"{
			mutate { add_field => { "[@metadata][index_name]" => "catalina-%{log-year}" } }
		}
		else{
			mutate { add_field => { "[@metadata][index_name]" => "localhost-%{log-year}" } }
		}

		# mutate{
		# 	remove_field => ["message", "ecs", "host", "agent"]
		# }
	}

	# TEST PURPOSE
	# if [clientip] == "::1"{
	# 	# using replace, cause add_field will add seconde index_name if a value exist "index1,index2"
	# 	# wich is illegal 
	# 	mutate { replace => { "[@metadata][index_name]" => "workstation-apache-access-logs" } }
	# 	mutate { convert => {"bytes" => "integer"}}
	# 	mutate { convert => {"response" => "integer"}}
	# 	mutate {
	# 		remove_field => [ "agent", "service", "ecs", "tags", "fileset" ]
	# 	}
	# 	date {
	# 		match => ["logtimestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
	# 		timezone => "Etc/GMT-1"
	# 		locale => "en"
	# 	}
	# }
}

output {
	# FOR DEBUG
	# stdout { codec => rubydebug }
	stdout { codec => rubydebug { metadata => true } }

	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "logstash_internal"
		password => "${ES_LOGSTASH_INTERNAL_PWD}"
		index => "%{[@metadata][index_name]}"
	}

	# TEST PURPOSE
	# if [clientip] == "::1"{
	# 	stdout { codec => rubydebug { metadata => true } }
	# 	elasticsearch {
	# 		hosts => "elasticsearch:9200"
	# 		user => "logstash_internal_workstation"
	# 		password => "${ES_LOGSTASH_INTERNAL_PWD}"
	# 		index => "%{[@metadata][index_name]}"
	# 	}
	# }

}
